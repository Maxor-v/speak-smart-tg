import os
import asyncio
from tempfile import NamedTemporaryFile
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from database import db
from evaluation import check_answer, recognize_speech_from_file, handle_user_query, convert_ogg_to_wav
from logger import log_message, log_error, log_practice_session, logger
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_OPERATOR_ID
from models import Phrase

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = TELEGRAM_BOT_TOKEN
OPERATOR_ID = TELEGRAM_OPERATOR_ID

if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PracticeState(StatesGroup):
    waiting_for_response = State()
    in_practice = State()


class SupportState(StatesGroup):
    waiting_question = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞"), KeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

practice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÅ –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"), KeyboardButton(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
    ],
    resize_keyboard=True
)

support_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"), KeyboardButton(text="üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.update.middleware()
async def user_activity_middleware(handler, event, data):
    try:
        if event.message:
            user = event.message.from_user
            await db.add_user(user.id, user.username, user.first_name, user.last_name)
            await db.update_user_activity(user.id)
        return await handler(event, data)
    except Exception as e:
        await log_error(db, "MiddlewareError", f"Error in user activity middleware: {e}")
        return await handler(event, data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —è–∑—ã–∫–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—É—é —Ä–µ—á—å üéØ\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ‚ùì\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard
        )
        await log_message(db, message.from_user.id, None, "outgoing", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    except Exception as e:
        await log_error(db, "StartError", f"Error in start command: {e}", user_id=message.from_user.id)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    try:
        await message.answer(
            "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/practice - –Ω–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É\n"
            "/support - –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Üì",
            reply_markup=main_keyboard
        )
        await log_message(db, message.from_user.id, None, "outgoing", "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏")
    except Exception as e:
        await log_error(db, "HelpError", f"Error in help command: {e}", user_id=message.from_user.id)


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await cmd_help(message)


@dp.message(Command("practice"))
@dp.message(F.text == "üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞")
async def cmd_practice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    try:
        session_id = await db.start_practice_session(message.from_user.id)
        await state.set_state(PracticeState.in_practice)
        await state.update_data(session_id=session_id, correct_answers=0, phrases_practiced=0)

        await log_message(db, message.from_user.id, session_id, "outgoing", "–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏")
        await send_random_phrase(message, state)
    except Exception as e:
        await log_error(db, "PracticeError", f"Error starting practice: {e}", user_id=message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∞–∫—Ç–∏–∫–∏")


async def send_random_phrase(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    try:
        phrases = await db.get_all_phrases()
        if not phrases:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            await state.clear()
            return

        import random
        phrase_row = random.choice(phrases)
        phrase = Phrase.from_db_row(phrase_row)

        await state.update_data(current_phrase_id=phrase.id, current_phrase_text=phrase.text)

        audio_file = FSInputFile(
            path=phrase.audio_path,
            filename="audio.wav"
        )

        await message.answer_voice(
            voice=audio_file,
            caption=f"üéß –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ñ—Ä–∞–∑—É –∏ –¥–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç", #\n\n<code>{phrase.text}</code>",
            reply_markup=practice_keyboard
        )

        await state.set_state(PracticeState.waiting_for_response)
        await log_message(db, message.from_user.id, (await state.get_data()).get('session_id'),
                          "outgoing", f"–ê—É–¥–∏–æ—Ñ—Ä–∞–∑–∞: {phrase.text}")
    except Exception as e:
        await log_error(db, "SendPhraseError", f"Error sending phrase: {e}", user_id=message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ—Ä–∞–∑—ã")


@dp.message(F.text == "üîÅ –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞")
async def new_phrase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã"""
    await send_random_phrase(message, state)


@dp.message(F.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def stop_practice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    try:
        data = await state.get_data()
        session_id = data.get('session_id')
        correct_answers = data.get('correct_answers', 0)
        phrases_practiced = data.get('phrases_practiced', 0)

        if session_id:
            await log_practice_session(db, message.from_user.id, session_id, phrases_practiced, correct_answers)
            await log_message(db, message.from_user.id, session_id, "outgoing", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏")

        await state.clear()
        accuracy = round(correct_answers / phrases_practiced * 100, 2) if phrases_practiced > 0 else 0
        await message.answer(
            f"–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–§—Ä–∞–∑ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {phrases_practiced}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%",
            reply_markup=main_keyboard
        )
    except Exception as e:
        await log_error(db, "StopPracticeError", f"Error stopping practice: {e}", user_id=message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏")


@dp.message(PracticeState.waiting_for_response, F.voice)
async def handle_voice_response(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    voice = message.voice
    file_info = await bot.get_file(voice.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    with NamedTemporaryFile(delete=False, suffix='.ogg') as tmp_ogg:
        tmp_ogg.write(downloaded_file.read())
        ogg_path = tmp_ogg.name

    wav_path = None
    recognized_text = ""
    try:
        data = await state.get_data()
        session_id = data.get('session_id')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await log_message(db, message.from_user.id, session_id, "incoming", "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        try:
            wav_path = await convert_ogg_to_wav(ogg_path)
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await log_error(db, "AudioConversionError", f"Error converting audio: {e}", user_id=message.from_user.id)
            return

        recognized_text = recognize_speech_from_file(wav_path)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
        if recognized_text:
            await log_message(db, message.from_user.id, session_id, "incoming", f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")
        else:
            await log_message(db, message.from_user.id, session_id, "incoming", "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

        if not recognized_text:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        phrase_id = data.get('current_phrase_id')
        phrase_text = data.get('current_phrase_text')

        success, explanation = await check_answer(db, phrase_id, recognized_text)

        phrases_practiced = data.get('phrases_practiced', 0) + 1
        correct_answers = data.get('correct_answers', 0)
        if success:
            correct_answers += 1

        await state.update_data(phrases_practiced=phrases_practiced, correct_answers=correct_answers)

        if success:
            await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! \n\n–í–æ–ø—Ä–æ—Å: {phrase_text} \n\n–í–∞—à –æ—Ç–≤–µ—Ç: <i>{recognized_text}</i>\n\n{explanation}")
        else:
            await message.answer(
                f"‚ùå –ù—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ \n\n–í–æ–ø—Ä–æ—Å: {phrase_text}\n\n–í–∞—à –æ—Ç–≤–µ—Ç: <i>{recognized_text}</i>\n\n{explanation}")

        await log_message(db, message.from_user.id, session_id, "outgoing",
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {'True' if success else 'False'}. {explanation}")

        #await send_random_phrase(message, state)

    except Exception as e:
        await log_error(db, "VoiceProcessingError", f"Error processing voice: {e}", user_id=message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(ogg_path):
            os.unlink(ogg_path)
        if wav_path and os.path.exists(wav_path):
            os.unlink(wav_path)


@dp.message(PracticeState.waiting_for_response, F.text)
async def handle_text_in_voice_mode(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ñ—Ä–∞–∑—É. "
                         "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("support"))
@dp.message(F.text == "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await state.set_state(SupportState.waiting_question)
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=support_keyboard
    )


@dp.message(F.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_faq(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    faq_items = await db.get_all_faq()
    if not faq_items:
        await message.answer("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    response = "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
    for i, (id, question, answer, keywords) in enumerate(faq_items, 1):
        response += f"{i}. <b>{question}</b>\n{answer}\n\n"

    await message.answer(response)


@dp.message(F.text == "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä")
async def request_operator(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    if OPERATOR_ID:
        try:
            operator_message = (f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} "
                                f"(ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.\n\n"
                                f"–ò–º—è: {message.from_user.first_name or ''} "
                                f"{message.from_user.last_name or ''}\n\n"
                                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

            await bot.send_message(OPERATOR_ID, operator_message)
            await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            await log_message(db, message.from_user.id, None, "outgoing",
                              "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}"
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await log_error(db, "OperatorError", error_msg, user_id=message.from_user.id)
            logger.error(error_msg)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_keyboard)


@dp.message(SupportState.waiting_question, F.text == "üîô –ù–∞–∑–∞–¥")
async def support_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)


@dp.message(SupportState.waiting_question)
async def handle_support_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        return

    response = await handle_user_query(db, message.text)

    if "–∏–∑–≤–∏–Ω–∏—Ç–µ" in response.lower():
        await message.answer(f"{response}\n\n–•–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É?",
                             reply_markup=support_keyboard)
    else:
        await message.answer(response)
        await state.clear()
        await message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_keyboard)


@dp.message(Command("stats"))
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = await db.get_user_stats(message.from_user.id)
        await message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats['total_sessions']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {stats['total_phrases']}\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_correct']}\n"
            f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']}%",
            reply_markup=main_keyboard
        )
        await log_message(db, message.from_user.id, None, "outgoing", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await log_error(db, "StatsError", f"Error getting stats: {e}", user_id=message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=main_keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await db.init_db()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ close, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        pass


if __name__ == "__main__":
    asyncio.run(main())